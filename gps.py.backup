import datetime
import random
import time
import threading

class GPS:
    """Provides measures about GPS-positioning"""

    _ascending_rate = 5 # m/s
    _is_ascending = None
    _landing_time = None
    _landing_altitude = None
    _start_altitude = 440
    _current_altitude = _start_altitude

    _N = 5 # nbr of elements to calculate moving-avg
    
    # observers are notified when some events occurs
    
    # dictionary: map altitude -> callback
    _observers_fall_below = {}
    
    # dictionary: map altitude -> callback
    _observers_rise_above = {}
    
    _observers_burst = []
    
    _observers_landed = []


    def __init__(self):
        thread = threading.Thread(target=self._start)
        thread.start()


    def _start(self):
        start_time = datetime.datetime.utcnow()
        altitude_diffs = []

        while True:
            prev_is_ascending = self._is_ascending

            last_altitude = self._current_altitude
            self._current_altitude = self._altitude()

            altitude_diffs.append(self._current_altitude - last_altitude)
            altitude_diffs = altitude_diffs[-1 * self._N:] # only keep N-last elements
            moving_avg = self._moving_avg(altitude_diffs)
            if moving_avg >= 2:
                self._is_ascending = True
            elif moving_avg <= -2:
                self._is_ascending = False
            else:
                self._is_ascending = None # undefined, probably by starting-place or after landing

            if prev_is_ascending != self._is_ascending:
                print("State change from is_ascending " + str(prev_is_ascending) + " to " + str(self._is_ascending))
                print("Current altitude: " + str(self._current_altitude))

            if prev_is_ascending == True and self._is_ascending != True:
                print("Burst: " + str(self._current_altitude))
                observersCopy = self._observers_burst.copy()
                for callback in self._observers_burst:
                    callback(self._current_altitude)
                    # clear registered callback. Sending event only once!
                    observersCopy.remove(callback)
                    
                self._observers_burst = observersCopy
                    
            observersCopy = self._observers_rise_above.copy()
            for altitude_key in list(filter(lambda x: self._current_altitude > x and self._is_ascending == True, self._observers_rise_above.keys())):
                callback = self._observers_rise_above[altitude_key]
                callback(self._current_altitude)
                # clear registered callback. Sending event only once!
                observersCopy.pop(altitude_key)
                
            self._observers_rise_above = observersCopy
                    
            observersCopy = self._observers_fall_below.copy()
            for altitude_key in list(filter(lambda x: self._current_altitude < x and self._is_ascending == False, self._observers_fall_below.keys())):
                callback = self._observers_fall_below[altitude_key]
                callback(self._current_altitude)
                # clear registered callback. Sending event only once!
                observersCopy.pop(altitude_key)
                
            self._observers_fall_below = observersCopy
                
            if prev_is_ascending == False and self._is_ascending == None:
                print("Landed at altitude " + str(self._current_altitude))
                self._landing_altitude = self._current_altitude
                observersCopy = self._observers_landed.copy()
                for callback in self._observers_landed:
                    callback(self._landing_altitude)
                    # clear registered callback. Sending event only once!
                    observersCopy.remove(callback)
                    
                self._observers_landed = observersCopy

            time.sleep(0.0001)


    def _altitude(self):
        cycle_time = 1 # second
        jitter = random.uniform(-2.0, 2.0)
        landing_altitude = 700
        burst_altitude = 34000

        if self._landing_time == None:
            altitude = self._current_altitude + cycle_time * (self._ascending_rate + jitter)

            if self._current_altitude <= landing_altitude and self._is_ascending == False:
                self._landing_time = datetime.datetime.utcnow()
        else:
            altitude = self._current_altitude + jitter

        if altitude >= burst_altitude:
            self._ascending_rate *= -1

        return altitude

    def altitude(self):
        return self._current_altitude

    def ascending_rate(self):
        return self._ascending_rate

    def latitude(self):
        return 47.0746

    def longitude(self):
        return 7.3077

    def speed(self):
        return 57.834

    def heading(self):
        return 257.334

    def landing_time(self):
        return self._landing_time

    def landing_altitude(self):
        return self._landing_altitude
    
    def subscribe_rise_above(self, altitude, callback):
        self._observers_rise_above.update({altitude: callback})
            
    def subscribe_burst(self, callback):
        self._observers_burst.append(callback)
    
    def subscribe_fall_below(self, altitude, callback):
        self._observers_fall_below.update({altitude: callback})
        
    def subscribe_landed(self, callback):
        self._observers_landed.append(callback)
    

    def _moving_avg(self, mylist):
        if len(mylist) < self._N:
            return 0

        cumsum = [0]

        for i, x in enumerate(mylist, 1):
            cumsum.append(cumsum[i-1] + x)
            if i>=self._N:
                moving_ave = (cumsum[i] - cumsum[i - self._N]) / self._N
                #can do stuff with moving_ave here
                #moving_aves.append(moving_ave)

        return moving_ave


# gps = GPS()